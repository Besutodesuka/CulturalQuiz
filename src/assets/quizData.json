[
  {
    "id": 1,
    "question": "What is not true about concurrency?",
    "options": [
      "Memory of a process cannot be shared with other processes",
      "Concurrency allows tasks to progress independently",
      "Concurrent tasks always run in parallel",
      "Concurrency may lead to race conditions"
    ],
    "answer": "Memory of a process cannot be shared with other processes",
    "reason": "Processes can share memory if explicitly allowed, like using shared memory or inter-process communication (IPC)."
  },
  {
    "id": 2,
    "question": "What is not true about threads?",
    "options": [
      "Threads are lightweight processes",
      "Threads in the same process share the same address space",
      "Each thread has separate address spaces",
      "Threads share resources such as memory and file descriptors"
    ],
    "answer": "Each thread has separate address spaces",
    "reason": "Threads in the same process share the same address space, which includes code, data, and resources."
  },
  {
    "id": 3,
    "question": "What is not true about race conditions?",
    "options": [
      "Race condition makes processes run faster",
      "Race conditions occur when shared resources are accessed without proper synchronization",
      "Race conditions lead to unpredictable behavior",
      "Race conditions require at least two processes or threads"
    ],
    "answer": "Race condition makes processes run faster",
    "reason": "A race condition doesn\u2019t improve speed; it causes unpredictable behavior when multiple processes access shared resources."
  },
  {
    "id": 4,
    "question": "Which statement cannot be a critical region?",
    "options": [
      "Reading a shared file",
      "Writing to a shared variable",
      "Updating a shared counter",
      "i++"
    ],
    "answer": "i++",
    "reason": "Even simple operations like i++ can be critical if multiple threads access the variable without synchronization."
  },
  {
    "id": 5,
    "question": "Which system call causes the main thread to wait for a child thread to terminate?",
    "options": [
      "pthread_create",
      "pthread_join",
      "pthread_exit",
      "pthread_kill"
    ],
    "answer": "pthread_join",
    "reason": "pthread_join blocks the caller until the specified thread finishes."
  },
  {
    "id": 6,
    "question": "What is not true about locks?",
    "options": [
      "Locks can prevent race conditions",
      "We can create a pure software lock",
      "Locks can cause deadlock",
      "Locks are used to protect critical regions"
    ],
    "answer": "We can create a pure software lock",
    "reason": "Hardware assistance (like atomic instructions) is needed to create reliable locks."
  },
  {
    "id": 7,
    "question": "What is true about locks?",
    "options": [
      "Locks prevent all deadlocks",
      "Locks guarantee progress for all threads",
      "Starvation might happen when using only test-and-set",
      "Locks are never required in multi-threaded programs"
    ],
    "answer": "Starvation might happen when using only test-and-set",
    "reason": "Starvation occurs if one thread gets stuck waiting because others keep accessing the lock."
  },
  {
    "id": 8,
    "question": "Which software does not support solving wasting cycles with locks?",
    "options": [
      "Spinlocks",
      "Semaphores",
      "Mutex",
      "All are software supports to solve wasting cycles"
    ],
    "answer": "All are software supports to solve wasting cycles",
    "reason": "Techniques like spinlocks or conditional variables help minimize CPU waste."
  },
  {
    "id": 9,
    "question": "What is not true about the bounded buffer problem?",
    "options": [
      "Mutex is used to count available items",
      "The producer and consumer access a shared buffer",
      "Semaphores can be used for synchronization",
      "Deadlock can occur without proper synchronization"
    ],
    "answer": "Mutex is used to count available items",
    "reason": "Mutexes manage access to shared resources, but counters like semaphores count available items."
  },
  {
    "id": 10,
    "question": "What does a producer call when it produces something?",
    "options": [
      "cond_signal(&empty)",
      "cond_signal(&fill)",
      "pthread_exit",
      "pthread_create"
    ],
    "answer": "cond_signal(&fill)",
    "reason": "The producer signals the consumer that the buffer has a new item (fills the buffer)."
  }
]